#ifndef SAMPLES
#define SAMPLES UNLIMITED
#endif

#define DIFFUSE_ILLUMINATION
#define DISPERSION

ArNode * create_Prism(
        ART_GV  * art_gv
        )
{
    
#ifdef DISPERSION

    ArObj custom_refraction = CONST_COLOUR_RSSPECTRUM(400 NANOMETER, 100 NANOMETER, 2.0,
        2.0899, 2.0425, 2.0199, 2.0069, 1.9986,
        RSS_END
        );
        
    ArObj glassVolumeMaterial =
        STANDARD_MATERIAL(
            REFRACTION_SCHOTT_LaSF_35,
            CONST_COLOUR_GREY(0.0)
            );
#else
    ArObj glassVolumeMaterial =
        STANDARD_MATERIAL(
            CONST_COLOUR_GREY(1.5),
            CONST_COLOUR_GREY(0.0)
            );
#endif
                          	      
    ArObj glassSurfaceMaterial =  SMOOTH_FRESNEL_SURFACE;

    ArObj prismBase1 = [ CUBE apply: SHEAR_XY( (1.0 / MATH_SQRT_3), 0.0) ];
    ArObj prismBase2 = [ CUBE apply: SHEAR_XY(-(1.0 / MATH_SQRT_3), 0.0) ];
    ArObj prism = [ prismBase1 and: prismBase2 ];
    				 
    prism =
        [ prism apply
            :   glassSurfaceMaterial
            :   glassVolumeMaterial
            :   USCALE( 14 )
            :   ROT_Y( 240 DEGREES)
            :   ROT_Z( -30 DEGREES)
            :   TRANSLATION( 0.0, 0.0, -1.0)
            :   TRANSLATION( 2.2, -4, 2 )
	    ];
	    
    return prism;
}

ArNode * createMacbethChart(
        ART_GV  * art_gv
        )
{
    ArObj s03   = LAMBERT_REFLECTOR( MACBETH_DARKSKIN );
    ArObj s02   = LAMBERT_REFLECTOR( MACBETH_ORANGE );
    ArObj s01   = LAMBERT_REFLECTOR( MACBETH_BLUE );
    ArObj s00   = LAMBERT_REFLECTOR( MACBETH_WHITE );

    ArObj s13   = LAMBERT_REFLECTOR( MACBETH_LIGHTSKIN );
    ArObj s12   = LAMBERT_REFLECTOR( MACBETH_PURPLISHBLUE );
    ArObj s11   = LAMBERT_REFLECTOR( MACBETH_GREEN );
    ArObj s10   = LAMBERT_REFLECTOR( MACBETH_NEUTRAL8 );

    ArObj s23   = LAMBERT_REFLECTOR( MACBETH_BLUESKY );
    ArObj s22   = LAMBERT_REFLECTOR( MACBETH_MODERATERED );
    ArObj s21   = LAMBERT_REFLECTOR( MACBETH_RED );
    ArObj s20   = LAMBERT_REFLECTOR( MACBETH_NEUTRAL65 );

    ArObj s33   = LAMBERT_REFLECTOR( MACBETH_FOLIAGE );
    ArObj s32   = LAMBERT_REFLECTOR( MACBETH_PURPLE );
    ArObj s31   = LAMBERT_REFLECTOR( MACBETH_YELLOW );
    ArObj s30   = LAMBERT_REFLECTOR( MACBETH_NEUTRAL5 );

    ArObj s43   = LAMBERT_REFLECTOR( MACBETH_BLUEFLOWER );
    ArObj s42   = LAMBERT_REFLECTOR( MACBETH_YELLOWGREEN );
    ArObj s41   = LAMBERT_REFLECTOR( MACBETH_MAGENTA );
    ArObj s40   = LAMBERT_REFLECTOR( MACBETH_NEUTRAL35 );

    ArObj s53   = LAMBERT_REFLECTOR( MACBETH_BLUISHGREEN );
    ArObj s52   = LAMBERT_REFLECTOR( MACBETH_ORANGEYELLOW );
    ArObj s51   = LAMBERT_REFLECTOR( MACBETH_CYAN );
    ArObj s50   = LAMBERT_REFLECTOR( MACBETH_BLACK );
    
    ArObj bgr_surface  = LAMBERT_REFLECTOR( CONST_COLOUR_GRAY(0.042) );

    ArObj cube = [ CUBE apply: SCALE(5.5,5.5,0.5) : TRANSLATION(-2.75,-2.75,0) ];
    
    double  dv = 0.0;
    
    ArObj obj00 = [ cube apply: TRANSLATION(-15, -9, dv) : s00 ];
    ArObj obj01 = [ cube apply: TRANSLATION(-15, -3, dv) : s01 ];
    ArObj obj02 = [ cube apply: TRANSLATION(-15,  3, dv) : s02 ];
    ArObj obj03 = [ cube apply: TRANSLATION(-15,  9, dv) : s03 ];

    ArObj obj10 = [ cube apply: TRANSLATION( -9, -9, dv) : s10 ];
    ArObj obj11 = [ cube apply: TRANSLATION( -9, -3, dv) : s11 ];
    ArObj obj12 = [ cube apply: TRANSLATION( -9,  3, dv) : s12 ];
    ArObj obj13 = [ cube apply: TRANSLATION( -9,  9, dv) : s13 ];

    ArObj obj20 = [ cube apply: TRANSLATION( -3, -9, dv) : s20 ];
    ArObj obj21 = [ cube apply: TRANSLATION( -3, -3, dv) : s21 ];
    ArObj obj22 = [ cube apply: TRANSLATION( -3,  3, dv) : s22 ];
    ArObj obj23 = [ cube apply: TRANSLATION( -3,  9, dv) : s23 ];

    ArObj obj30 = [ cube apply: TRANSLATION(  3, -9, dv) : s30 ];
    ArObj obj31 = [ cube apply: TRANSLATION(  3, -3, dv) : s31 ];
    ArObj obj32 = [ cube apply: TRANSLATION(  3,  3, dv) : s32 ];
    ArObj obj33 = [ cube apply: TRANSLATION(  3,  9, dv) : s33 ];

    ArObj obj40 = [ cube apply: TRANSLATION(  9, -9, dv) : s40 ];
    ArObj obj41 = [ cube apply: TRANSLATION(  9, -3, dv) : s41 ];
    ArObj obj42 = [ cube apply: TRANSLATION(  9,  3, dv) : s42 ];
    ArObj obj43 = [ cube apply: TRANSLATION(  9,  9, dv) : s43 ];

    ArObj obj50 = [ cube apply: TRANSLATION( 15, -9, dv) : s50 ];
    ArObj obj51 = [ cube apply: TRANSLATION( 15, -3, dv) : s51 ];
    ArObj obj52 = [ cube apply: TRANSLATION( 15,  3, dv) : s52 ];
    ArObj obj53 = [ cube apply: TRANSLATION( 15,  9, dv) : s53 ];
    
    ArObj backG =
        [ CUBE apply
            :   SCALE(  38,  26,   0.5 )
            :   TRANSLATION( -19, -13,  -0.001 )
            :   bgr_surface 
            ];

    ArObj chart =
	UNION( obj00, obj01, obj02, obj03,
	       obj10, obj11, obj12, obj13,
	       obj20, obj21, obj22, obj23,
	       obj30, obj31, obj32, obj33,
	       obj40, obj41, obj42, obj43,
	       obj50, obj51, obj52, obj53,
	       backG, UNION_END );

    return chart;
//    return [ chart apply: USCALE( 1.0 / 38.0 ) ];
}

#define MACBETH_CHART   createMacbethChart( art_gv )

/* ---------------------------------------------------------------------------
    'createSymetricLinesExpression'
--------------------------------------------------------------------------- */
id createSymetricLinesExpression(
        ART_GV  * art_gv,
        id        inputValue,
        double    frequency,
        double    thickness
        )
{
    // R -> [0, 1]
    id periodicExpr =
            DD_XMOD_D( 
                    DD_MUL_D( inputValue, CONST_D( frequency ) ),
                    CONST_D( 1.0 )
                    );
            
    // lines
    id gridExpr =
        DD_SUB_D(
            CONST_D( 1.0 ),
            DDD_PULSE_D(
                CONST_D( thickness / 2.0 ),
                CONST_D( 1.0 - thickness / 2.0 ),
                periodicExpr
                )
            );

    return gridExpr;
}

/* ---------------------------------------------------------------------------
    'createXYGridSurface'
--------------------------------------------------------------------------- */
id createXYGridSurface(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurface,
        double    thickness,        // portion of the periodic interval
        double    frequency
        )
{
    id xLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P3_X( coordinates ),
            frequency,
            thickness
            );
    id yLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P3_Y( coordinates ),
            frequency,
            thickness
            );
    
    id xyGridExpr =
        DD_MAX_D(
            xLinesExpr,
            yLinesExpr
            );
    
    return
        MAPPED_SURFACE(
            xyGridExpr,
            SURFACE_MAP(
                0.0, mainSurface,
                1.0, gridSurface,
                MAP_END
                )
            );
}

/* ---------------------------------------------------------------------------
    'createXYGridSurface'
--------------------------------------------------------------------------- */
id createNoiseSurface(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurface,
        id        blobsurface
        )
{
    id noiseExpr =
    //P3_PERLIN_NOISE( coordinates );
    P3_FBM_NOISE(
                    coordinates,
                    CONST_L( 6 ),
                    CONST_D( 2.0 ),
                    CONST_D( 0.5 ) );
                     //DD_MUL_D(,CONST_DOUBLE(1.0));
    //noiseExpr = DDD_PULSE_D( CONST_D( 0.5 ), CONST_D( 0.6 ), noiseExpr );

    return
        MAPPED_SURFACE(
            noiseExpr,
            SURFACE_MAP(
                0.0, blobsurface,
                0.25, blobsurface,
                0.45, mainSurface,
                0.5, gridSurface,
                0.6, gridSurface,
                0.65, mainSurface,
                0.75, blobsurface,
                1.0, blobsurface,
                MAP_END
                )
            );
}

/* ---------------------------------------------------------------------------
    'createXYGridSurface2Levels'
--------------------------------------------------------------------------- */
id createXYGridSurface2Levels(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurfaceLevel1,
        id        gridSurfaceLevel2,
        double    level1Frequency,
        int       level2SubCount,
        double    thickness         // portion of the whole periodic interval
        )
{
    id gridSurface2 =
        createXYGridSurface(
            art_gv,
            coordinates,
            mainSurface,
            gridSurfaceLevel2,
            thickness * level2SubCount / 2.0,
            level1Frequency * level2SubCount
            );

    id gridSurface1 =
        createXYGridSurface(
            art_gv,
            coordinates,
            gridSurface2,
            gridSurfaceLevel1,
            thickness,
            level1Frequency
            );
    
    return gridSurface1;
}

ARM_MAIN_FUNCTION(PrismScene)
{
    id whiteLambertSurface =
        LAMBERT_REFLECTOR( MACBETH_WHITE );

    id lightGreyLambertSurface =
        LAMBERT_REFLECTOR( MACBETH_NEUTRAL35 );

    id pinkLambertSurface =
        LAMBERT_REFLECTOR( MACBETH_BLACK);

    id baseSurface =
        createXYGridSurface2Levels(
            art_gv,
            WORLDSPACE_COORDS,
            whiteLambertSurface,
            pinkLambertSurface,
            lightGreyLambertSurface,
            1.0 / 7.7,
            3,
            0.04
            );

    id cylinder0   =
        [ CYLINDER apply
            :   SCALE( 4000.0, 4000.0, 1.0 )
            :   TRANSLATION( 0.0, 0.0, -3.6)
            :   baseSurface
            ];

    double tz = -0.7;
    
    id scene_geometry =
        UNION(
            create_Prism(art_gv),
            
            [ MACBETH_CHART apply
                :   ROT_Z( 180 DEGREES )
                :   ROT_X( -60 DEGREES )
                :   USCALE( 0.35 )
                :   TRANSLATION( 8.0, -26.0 , 1.6 )
                ],

            cylinder0,

            UNION_END
            );
            
    id camera =
        [ CAMERA
            imageSize:  IVEC2D( 500 , 500 )
           // ray:        RAY3D( PNT3D(0.0,50.0,3.0),VEC3D(0.0,-50.0,-3) )
            ray:        RAY3D( PNT3D(0.0,50.0,30.0),VEC3D(0.0,-50.0,-27) )
            zoom:       1.4
            ];

    id actionsequence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,

            [ LIGHTSOURCE_COLLECTOR
                sampler2D:   STANDARD_SAMPLER_2D
                resolution:  5
                type:        arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ PATHTRACER
                        rayCaster:        STANDARD_RAYCASTER
			            maximalRecursion: 30
                    ]
                sampleSplattingKernel: TENT_KERNEL
                samplesPerPixel:       SAMPLES
                randomValueGeneration: PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_ARTRAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
                        
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource:    YES
                bitsPerChannel:  8
                ],
            
            ACTION_SEQUENCE_END 
            );

#ifdef DIFFUSE_ILLUMINATION
    id  environment_material =
        UNIFORM_ENVIRONMENT_MATERIAL( CIE_ILLUMINANT_D50, 0.01 );
#else
    id skylight =
        [ HOSEK_SKYLIGHT
            elevation   : 26 DEGREES
            azimuth     : 55.0 DEGREES
            solColour   : 9600 KELVIN
            solIntensity: 1.0
            turbidity   : 2.0
            groundAlbedo: CONST_COLOUR_GREY(0.5)
            ];
#endif

    return
        [ SCENE
            sceneGeometry : scene_geometry
#ifdef DIFFUSE_ILLUMINATION
            environmentMaterial: environment_material
#else
            skyModel      : skylight
#endif
            camera        : camera
            actionSequence: actionsequence
            ];
}
